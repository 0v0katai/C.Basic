"NormalG ",		// F72B
"ThickG ",		// F72C
"BrokenThickG ",	// F72D
"DotG ",		// F73F

"G SelOn ",		// F7C8
"T SelOn ",		// F7C9
"G SelOff ",		// F7D8
"T SelOff ",		// F7D9

"SetG-Color ",		// F998
"ThinG ",		// F9F5


"Graph X=",		// F762

"Y=Type",		// F763
"r=Type",		// F764
"ParamType",		// F765
"@F766",		// F766
"X=Type",		// F767
"X>Type",		// F768
"X<Type",		// F769
"Y>Type",		// F76A
"Y<Type",		// F76B
"Y>=Type",		// F76C
"Y<=Type",		// F76D
"X>=Type",		// F76E
"X<=Type",		// F76F

"GraphY",		// 7FF0
"Graphr",		// 7FF1
"GraphXt",		// 7FF2
"GraphYt",		// 7FF3
"GraphX",		// 7FF4

"Graph X>",		// F92C
"Graph X<",		// F92D
"Graph X>=",		// F92E
"Graph X<=",		// F92F



"DispF-Tbl",		// F72E
"VarRange",		// F788
"VarList ",		// F91D

"VarList1",		// F7B2
"VarList2",		// F7B3
"VarList3",		// F7B4
"VarList4",		// F7B5
"VarList5",		// F7B6
"VarList6",		// F7B7





以下のコマンドは DrawGraph など描画時の挙動に影響するものですが、描画する側のコマンドの変更はまだ行わないので内部値の変更のみになります。

なお、ルーチンは C.Basic で記述し、便宜的に Mat θ を使って説明することとします。
Y1, r2, Xt3 などの数字部分は〈関数式の番号〉/ "_FuncNo" とします。
また、16 ビットカラー値は "_Color16" と表します。

========================================
・ G SelOn
（書式）G SelOn 〈関数式の番号〉

【ルーチン】
Mat θ[ _FuncNo, 7] ⇒ Mat θ[ _FuncNo, 3] or 0x80→Mat θ[ _FuncNo, 3]

========================================
・ G SelOff
（書式）G SelOff 〈関数式の番号〉

【ルーチン】
Mat θ[ _FuncNo, 7] ⇒ Mat θ[ _FuncNo, 3] and 0x7F→Mat θ[ _FuncNo, 3]

========================================
・ T SelOn
（書式）T SelOn 〈関数式の番号〉

【ルーチン】
Mat θ[ _FuncNo, 7] ⇒ Mat θ[ _FuncNo, 3] or 0x20→Mat θ[ _FuncNo, 3]

========================================
・ T SelOff
（書式）T SelOff 〈関数式の番号〉

【ルーチン】
Mat θ[ _FuncNo, 7] ⇒ Mat θ[ _FuncNo, 3] and 0xDF→Mat θ[ _FuncNo, 3]

========================================
・ NormalG
（書式）NormalG 〈関数式の番号〉

【ルーチン】
Mat θ[ _FuncNo, 7] ⇒ 0x02→Mat θ[ _FuncNo, 4]

========================================
・ ThickG
（書式）ThickG 〈関数式の番号〉

【ルーチン】
Mat θ[ _FuncNo, 7] ⇒ 0x03→Mat θ[ _FuncNo, 4]

========================================
・ BrokenThickG
（書式）BrokenThickG 〈関数式の番号〉

【ルーチン】
Mat θ[ _FuncNo, 7] ⇒ 0x05→Mat θ[ _FuncNo, 4]

========================================
・ DotG
（書式）DotG 〈関数式の番号〉

【ルーチン】
Mat θ[ _FuncNo, 7] ⇒ 0x08→Mat θ[ _FuncNo, 4]

========================================
・ ThinG 【CG 版のみ】
（書式）ThinG〈関数式の番号〉

【ルーチン】
Mat θ[ _FuncNo, 7] ⇒ 0x12→Mat θ[ _FuncNo, 4]

========================================
・ SetG-Color 【CG 版のみ】
（書式）SetG-Color 〈色指定コマンド〉,〈関数式の番号〉

【ルーチン】
Mat θ[ _FuncNo, 7] ⇒ _Color16→Poke(VarPtr(Mat θ[ _FuncNo, 5])).W

========================================


内部フォーマットは以下の通りです。
今後提案するルーチンはこれらに基づくものとなります。

〈01 - 02 バイト目〉
グラフ式のタイプを格納します。

・ 0x0108 …… Y=
・ 0x0198 …… Y>
・ 0x0188 …… Y<
・ 0x01B8 …… Y≧
・ 0x01A8 …… Y≦
・ 0x0208 …… X=
・ 0x0298 …… X>
・ 0x0288 …… X<
・ 0x02B8 …… X≧
・ 0x02A8 …… X≦
・ 0x040A …… <r>=
・ 0x0409 …… Param

〈03 バイト目〉
関数式の選択状況を格納します。
実際の値は以下の Or となります。

・ 0x01 …… 不明
・ 0x02 …… 不明
・ 0x04 …… 不明
・ 0x08 …… DefG
・ 0x10 …… Dyna
・ 0x20 …… Table
・ 0x40 …… グラフ右
・ 0x80 …… グラフ左

〈04 バイト目〉
グラフの線種の設定を格納します。

・ 0x02 …… Normal
・ 0x03 …… Thick
・ 0x05 …… Broken
・ 0x08 …… Dot
・ 0x12 …… Thin

〈05 - 06 バイト目〉
16 ビットカラー値です。








ところで、UCF での "DispF-Tbl" に関する話題ですが、
"DispF-Tbl" は関数式周りの仕様が固まらないことには動作させられないので、今後の順序としては次のようになると思います。


1. GraphY / Graphr / GraphXt / GraphYt / GraphX の実装を完了させる
　・ 多分このコメントの内容で全て

2. DispF-Tbl を実装する
　・ 行列画面を改変の上流用可能な箇所も

3. F Result を実装する
　・ DispF-Tbl と連動して初めて動作する

4. マニュアルグラフの描画を実装する
　・ ここからが最難関
　・ 完成は来月以降 (?)

5. DrawGraph コマンドを実装する
　・ ここまで出てきたルーチンを使い回しながら


"DispF-Tbl" は、関数式の内容を計算 → 一時停止の場合は結果を表示、というコマンドです。

計算に使用する式には「選択されている」という前提の他に、
・ "Func Type" が "Y=" の場合は "Y=" の式のみ
・ "Func Type" が "r=" の場合は "r=" の式のみ
・ "Func Type" が "Param" の場合は "Param" の式のみ

という条件があります。

これらの条件に当てはまる式について計算結果を行列 (のようなもの) に格納するのですが、数値の他に "ERROR" というのがあって、この実装形式の検討が必要です。

結果の表示部分は既存の行列表示ルーチンを大部分で利用できそうですが、
表の上側の文字列が中央揃えであったり、関数式によって色分けが必要であったりするので、
これらの部分などでは変更が必要になります。



まず、テーブル機能はグラフ機能のサブセットであるため、複素数が利用できません。

次に、Hlib2 様のコメントで気がつきましたが、
・ VarRange
・ VarList

というコマンドがあり、これらを利用するには "Variable" という項目をセットアップに追加する必要があります。

設定の内部値は、0 が "Range"、1 以上は List n に対応します。

数表を作成する際の X / <r> / T の値は、
"Variable" の設定が "Range" の場合は F Start から F End までを F pitch 刻みで変化させ、
"List n" の場合は対応するリストに含まれる値を使用します。
この場合、List に複素数が含まれていてはいけません。


私が知らなかった文法です。(^^;
・ G SelOn
・ G SelOff
・ T SelOn
・ T SelOff

これらの記法で、すべての関数式の選択 / 非選択が出来ます。

これらのコマンドは既に、関数式が登録されていない場合はプレフィックスを操作しないようになっているはずなので、
例えば "G SelOn" であれば

For 1→_Counter To 127
　G SelOn _Counter
Next

と同じです。


なお、"F Result" は代入先の行列を指定しない場合は Mat Ans に出力します。